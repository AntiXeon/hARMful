// WARNING: This file is automatically generated. Any manual modification will be removed.
#include <scene/components/materials/shaders/GLSL/450/effects/Shadows.hpp>

std::string ShadowsDirLightShadowsVertexCode =
"\
// Depth map for directional light shadows.\n\
\n\
layout(location = 0) in vec3 position ;\n\
\n\
uniform mat4 modelLightSpaceMatrix ;\n\
\n\
void main() {\n\
    gl_Position = modelLightSpaceMatrix * vec4(position, 1.f) ;\n\
}\n\
" ;

std::string ShadowsShadowCalculationModuleCode =
"\
uniform bool useShadow ;\n\
layout(binding = SHADOW_DEPTH_MAP_BINDING_UNIT) uniform sampler2D shadowDepth ;\n\
\n\
const float NotInShadow = 0.f ;\n\
const float InShadow = 1.f ;\n\
\n\
/**\n\
 * Compute the shadow for the current fragment.\n\
 * @param   lightSpaceFragPosition  Position of the fragment in the light space\n\
 *                                  coordinates system. It is used to compare\n\
 *                                  the depth in the shadow depth and the one of\n\
 *                                  the current fragment from the light point of\n\
 *                                  view.\n\
 * @return  0 if the fragment is lit (not shadowed); 1 if the fragment is in the\n\
 *          shadow. It is in the shadow of the light if its depth is higher than\n\
 *          the depth taken from the light depth map.\n\
 */\n\
float ShadowCompute(vec3 lightSpaceFragPosition) {\n\
    if (useShadow) {\n\
        return NotInShadow ;\n\
    }\n\
    else {\n\
        return NotInShadow ;\n\
    }\n\
}\n\
" ;

std::string ShadowsDirLightShadowsFragmentCode =
"\
// Depth map for directional light shadows.\n\
\n\
void main() {\n\
    // gl_FragDepth = gl_FragCoord.z ;\n\
}\n\
" ;

