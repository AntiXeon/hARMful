#ifndef __LOGGEN_H__
#define __LOGGEN_H__
    #ifdef DEBUG_MODE

#include "../pattern/NoCopy.h"

#include <fstream>
#include <sstream>
#include <string>

/**
 * @brief The LogGen class is used to output logs into an external file.
 * @version 1.0 22/04/2013
 */
class LogGen : public NoCopy {
    private:
                                                                    /** DATA **/
		/**
		 * @brief Unique instance of the singleton. Generated on the software
		 *        launching, even before the main function.
		 */
		static LogGen Singleton ;

        /** @brief Log file name. */
        std::string m_filename ;

        /** @brief Output stream to save logs into a file. */
        std::ofstream m_output ;

        /** @brief String stream where different type of elements are stored. */
        static std::ostringstream StringStream ;


                                                               /** FUNCTIONS **/
		/** @brief Private constructor to avoid new instances. */
		LogGen() throw() ;
		
		/** @brief Destructor to delete dynamic instances. */
		~LogGen() throw() ;

    public:
        /**
		 * @brief Get the singleton instance.
		 * @return The unique instance.
		 */
        static LogGen& instance() ;

        /**
         * @brief Print a log element.
         */
        static void print(std::string log) ;

        /** @brief Print the content of the outputstringstream to the file. */
        inline static void print() {
            print(StringStream.str()) ;
            StringStream.str(std::string()) ;               // clear the stream!
            StringStream.clear() ;
        }

        /**
         * @brief Get the stream of the logger to add some data.
         * @warning The calls to this method should be followed by print().
         */
        inline static std::ostringstream& stream() {
            return StringStream ;
        }

    private:
        /** @brief Get the date. */
        inline std::string date() {
            // Open the log file by adding a flag to separate the different sessions
            time_t now = time(0) ;
            
            std::string datetime = std::string(ctime(&now)) ;
            // Remove the new line character generated by ctime()
            return datetime.substr(0, datetime.length() - 1)  ;
        }
} ;

    #endif
#endif
